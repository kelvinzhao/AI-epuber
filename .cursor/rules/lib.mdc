# Your rule content
引用多个库时要分析它们之间的依赖关系，确保引用顺序正确。

# 第一性原则
解决问题时，应该从最基本的原理出发，而不是从现有的解决方案出发。要问自己：
1. 问题的本质是什么？
2. 为什么会出现这个问题？
3. 最直接的解决方案是什么？
4. 是否有更简单、更本质的解决方案？

# 最小化原则
在解决问题时，应该：
1. 只做必要的修改
2. 避免过度设计
3. 保持代码简洁
4. 避免引入不必要的复杂性
5. 优先考虑最简单的解决方案

---

# Your rule content
引用多个库时要分析它们之间的依赖关系，确保引用顺序正确。

# 代码分析与问题排查规则

## 1. 业务逻辑优先
- 任何代码分析都必须从业务逻辑出发
- 不要被现有代码实现所束缚
- 技术实现应该服务于业务需求，而不是相反

## 2. 质疑精神
- 不要想当然地认为现有代码是合理的
- 不要盲目遵循所谓的"最佳实践"
- 对每一段代码的必要性保持怀疑态度

## 3. 分析方法
1. 首要步骤：
   - 理解业务流程和需求
   - 确认代码是否符合业务逻辑
   - 找出代码与业务逻辑的不匹配之处

2. 次要考虑：
   - 代码实现的技术细节
   - 性能优化
   - 设计模式

## 4. 常见陷阱
- 从技术实现角度过度解释代码的合理性
- 机械地套用设计模式或最佳实践
- 忽视业务上下文的重要性

## 5. 依赖管理
引用多个库时要分析它们之间的依赖关系，确保引用顺序正确。

## 6. 实际案例教训
在 Reader.jsx 中的事件监听器问题：
1. 错误做法：
   - 盲目采用 React useEffect 的清理模式
   - 在 effect 清理函数中移除不必要的事件监听器
   - 没有考虑业务流程中事件绑定的实际需求

2. 正确做法：
   - 理解业务流程：章节渲染时需要重新绑定事件
   - 分析实际需求：事件监听器只需在章节渲染时管理
   - 移除不必要的代码：去掉 effect 清理中的事件移除

3. 经验总结：
   - 代码实现必须服务于业务逻辑
   - 不要过度使用框架模式
   - 保持代码的简洁性和必要性
